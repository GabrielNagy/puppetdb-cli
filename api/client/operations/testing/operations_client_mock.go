// Code generated by MockGen. DO NOT EDIT.
// Source: ../operations_client.go

// Package mock_operations is a generated GoMock package.
package mock_operations

import (
	io "io"
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	operations "github.com/puppetlabs/puppetdb-cli/api/client/operations"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// GetExport mocks base method.
func (m *MockClientService) GetExport(params *operations.GetExportParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*operations.GetExportOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExport", params, authInfo, writer)
	ret0, _ := ret[0].(*operations.GetExportOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport.
func (mr *MockClientServiceMockRecorder) GetExport(params, authInfo, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockClientService)(nil).GetExport), params, authInfo, writer)
}

// GetQuery mocks base method.
func (m *MockClientService) GetQuery(params *operations.GetQueryParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetQueryOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", params, authInfo)
	ret0, _ := ret[0].(*operations.GetQueryOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockClientServiceMockRecorder) GetQuery(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockClientService)(nil).GetQuery), params, authInfo)
}

// GetStatus mocks base method.
func (m *MockClientService) GetStatus(params *operations.GetStatusParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetStatusOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", params, authInfo)
	ret0, _ := ret[0].(*operations.GetStatusOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockClientServiceMockRecorder) GetStatus(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockClientService)(nil).GetStatus), params, authInfo)
}

// PostImport mocks base method.
func (m *MockClientService) PostImport(params *operations.PostImportParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PostImportOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostImport", params, authInfo)
	ret0, _ := ret[0].(*operations.PostImportOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostImport indicates an expected call of PostImport.
func (mr *MockClientServiceMockRecorder) PostImport(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostImport", reflect.TypeOf((*MockClientService)(nil).PostImport), params, authInfo)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}
