// Code generated by MockGen. DO NOT EDIT.
// Source: client_request.go

// Package mock_runtime is a generated GoMock package.
package testing

import (
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	runtime "github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
)

// MockClientRequestWriter is a mock of ClientRequestWriter interface.
type MockClientRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockClientRequestWriterMockRecorder
}

// MockClientRequestWriterMockRecorder is the mock recorder for MockClientRequestWriter.
type MockClientRequestWriterMockRecorder struct {
	mock *MockClientRequestWriter
}

// NewMockClientRequestWriter creates a new mock instance.
func NewMockClientRequestWriter(ctrl *gomock.Controller) *MockClientRequestWriter {
	mock := &MockClientRequestWriter{ctrl: ctrl}
	mock.recorder = &MockClientRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRequestWriter) EXPECT() *MockClientRequestWriterMockRecorder {
	return m.recorder
}

// WriteToRequest mocks base method.
func (m *MockClientRequestWriter) WriteToRequest(arg0 runtime.ClientRequest, arg1 strfmt.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToRequest indicates an expected call of WriteToRequest.
func (mr *MockClientRequestWriterMockRecorder) WriteToRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToRequest", reflect.TypeOf((*MockClientRequestWriter)(nil).WriteToRequest), arg0, arg1)
}

// MockClientRequest is a mock of ClientRequest interface.
type MockClientRequest struct {
	ctrl     *gomock.Controller
	recorder *MockClientRequestMockRecorder
}

// MockClientRequestMockRecorder is the mock recorder for MockClientRequest.
type MockClientRequestMockRecorder struct {
	mock *MockClientRequest
}

// NewMockClientRequest creates a new mock instance.
func NewMockClientRequest(ctrl *gomock.Controller) *MockClientRequest {
	mock := &MockClientRequest{ctrl: ctrl}
	mock.recorder = &MockClientRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRequest) EXPECT() *MockClientRequestMockRecorder {
	return m.recorder
}

// SetHeaderParam mocks base method.
func (m *MockClientRequest) SetHeaderParam(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetHeaderParam", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeaderParam indicates an expected call of SetHeaderParam.
func (mr *MockClientRequestMockRecorder) SetHeaderParam(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaderParam", reflect.TypeOf((*MockClientRequest)(nil).SetHeaderParam), varargs...)
}

// GetHeaderParams mocks base method.
func (m *MockClientRequest) GetHeaderParams() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderParams")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// GetHeaderParams indicates an expected call of GetHeaderParams.
func (mr *MockClientRequestMockRecorder) GetHeaderParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderParams", reflect.TypeOf((*MockClientRequest)(nil).GetHeaderParams))
}

// SetQueryParam mocks base method.
func (m *MockClientRequest) SetQueryParam(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetQueryParam", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueryParam indicates an expected call of SetQueryParam.
func (mr *MockClientRequestMockRecorder) SetQueryParam(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueryParam", reflect.TypeOf((*MockClientRequest)(nil).SetQueryParam), varargs...)
}

// SetFormParam mocks base method.
func (m *MockClientRequest) SetFormParam(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFormParam", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFormParam indicates an expected call of SetFormParam.
func (mr *MockClientRequestMockRecorder) SetFormParam(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFormParam", reflect.TypeOf((*MockClientRequest)(nil).SetFormParam), varargs...)
}

// SetPathParam mocks base method.
func (m *MockClientRequest) SetPathParam(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPathParam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPathParam indicates an expected call of SetPathParam.
func (mr *MockClientRequestMockRecorder) SetPathParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPathParam", reflect.TypeOf((*MockClientRequest)(nil).SetPathParam), arg0, arg1)
}

// GetQueryParams mocks base method.
func (m *MockClientRequest) GetQueryParams() url.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryParams")
	ret0, _ := ret[0].(url.Values)
	return ret0
}

// GetQueryParams indicates an expected call of GetQueryParams.
func (mr *MockClientRequestMockRecorder) GetQueryParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryParams", reflect.TypeOf((*MockClientRequest)(nil).GetQueryParams))
}

// SetFileParam mocks base method.
func (m *MockClientRequest) SetFileParam(arg0 string, arg1 ...runtime.NamedReadCloser) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFileParam", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFileParam indicates an expected call of SetFileParam.
func (mr *MockClientRequestMockRecorder) SetFileParam(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileParam", reflect.TypeOf((*MockClientRequest)(nil).SetFileParam), varargs...)
}

// SetBodyParam mocks base method.
func (m *MockClientRequest) SetBodyParam(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBodyParam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBodyParam indicates an expected call of SetBodyParam.
func (mr *MockClientRequestMockRecorder) SetBodyParam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBodyParam", reflect.TypeOf((*MockClientRequest)(nil).SetBodyParam), arg0)
}

// SetTimeout mocks base method.
func (m *MockClientRequest) SetTimeout(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockClientRequestMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockClientRequest)(nil).SetTimeout), arg0)
}

// GetMethod mocks base method.
func (m *MockClientRequest) GetMethod() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethod")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMethod indicates an expected call of GetMethod.
func (mr *MockClientRequestMockRecorder) GetMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockClientRequest)(nil).GetMethod))
}

// GetPath mocks base method.
func (m *MockClientRequest) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockClientRequestMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockClientRequest)(nil).GetPath))
}

// GetBody mocks base method.
func (m *MockClientRequest) GetBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockClientRequestMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockClientRequest)(nil).GetBody))
}

// GetBodyParam mocks base method.
func (m *MockClientRequest) GetBodyParam() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBodyParam")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetBodyParam indicates an expected call of GetBodyParam.
func (mr *MockClientRequestMockRecorder) GetBodyParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBodyParam", reflect.TypeOf((*MockClientRequest)(nil).GetBodyParam))
}

// GetFileParam mocks base method.
func (m *MockClientRequest) GetFileParam() map[string][]runtime.NamedReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileParam")
	ret0, _ := ret[0].(map[string][]runtime.NamedReadCloser)
	return ret0
}

// GetFileParam indicates an expected call of GetFileParam.
func (mr *MockClientRequestMockRecorder) GetFileParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileParam", reflect.TypeOf((*MockClientRequest)(nil).GetFileParam))
}

// MockNamedReadCloser is a mock of NamedReadCloser interface.
type MockNamedReadCloser struct {
	ctrl     *gomock.Controller
	recorder *MockNamedReadCloserMockRecorder
}

// MockNamedReadCloserMockRecorder is the mock recorder for MockNamedReadCloser.
type MockNamedReadCloserMockRecorder struct {
	mock *MockNamedReadCloser
}

// NewMockNamedReadCloser creates a new mock instance.
func NewMockNamedReadCloser(ctrl *gomock.Controller) *MockNamedReadCloser {
	mock := &MockNamedReadCloser{ctrl: ctrl}
	mock.recorder = &MockNamedReadCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedReadCloser) EXPECT() *MockNamedReadCloserMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockNamedReadCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockNamedReadCloserMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockNamedReadCloser)(nil).Read), p)
}

// Close mocks base method.
func (m *MockNamedReadCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNamedReadCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNamedReadCloser)(nil).Close))
}

// Name mocks base method.
func (m *MockNamedReadCloser) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedReadCloserMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamedReadCloser)(nil).Name))
}
